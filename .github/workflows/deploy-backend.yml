name: Deploy Backend (SAM)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "infra/**"
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      STACK: cfo-agent-backend-rc2
      ARTIFACT_BUCKET: cfo-agent-sam-140023363799-us-east-1
      JWT_ISSUER: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_aVGk2nc5h"
      JWT_AUDIENCE: "7du031jrk1stsb33rskrs9d516"
      AGENT_ID: "UB0FKHQWC6"
      AGENT_ALIAS_ID: "A49HOKQII2"
      AWS_REGION: us-east-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Ensure artifact bucket exists
        shell: bash
        run: |
          set -e
          if ! aws s3api head-bucket --bucket "$ARTIFACT_BUCKET" 2>/dev/null; then
            aws s3api create-bucket --bucket "$ARTIFACT_BUCKET" --region "$AWS_REGION"
          fi

      - name: If stack is ROLLBACK_COMPLETE, delete and wait
        shell: bash
        run: |
          set -e
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" --region "$AWS_REGION" \
                    --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          echo "Current stack status: $STATUS"
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting stack $STACK ..."
            aws cloudformation delete-stack --stack-name "$STACK" --region "$AWS_REGION"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK" --region "$AWS_REGION"
            echo "Stack deleted."
          fi

      - name: SAM Validate
        working-directory: infra
        run: sam validate

      - name: SAM Build
        working-directory: infra
        run: sam build --use-container
        
      - name: Inspect built Lambda contents (site-packages)
        working-directory: infra
        run: |
          set -e
          echo "List functions built:"
          find .aws-sam/build -maxdepth 1 -type d -printf "%f\n" | sed 's/^/ - /'
          echo "----"
          # Cambia <GetKpisFunctionLogicalId> por el LogicalId real de tu funci√≥n
          FUNC_DIR=$(ls -d .aws-sam/build/* | grep -i '<GetKpisFunctionLogicalId>')
          echo "Function dir: $FUNC_DIR"
          echo "Python libs under site-packages:"
          find "$FUNC_DIR" -type d -path "*/site-packages" -print -exec ls -1 "{}" \; | sed 's/^/   /'
          echo "Check for pydantic and pydantic_core:"
          if ! find "$FUNC_DIR" -type d -path "*/site-packages" -exec bash -lc 'ls -1 "{}" | grep -E "^pydantic|pydantic_core"' \; ; then
            echo ">>> MISSING pydantic in built artifact" ; exit 2
          fi

      - name: Show built template & guard against reserved keys
        working-directory: infra
        shell: bash
        run: |
          echo ">>> Searching for AWS_REGION in built template"
          if grep -n "AWS_REGION" .aws-sam/build/template.yaml; then
            echo "ERROR: Found AWS_REGION in Lambda env vars of BUILT template. Remove it from infra/template.yaml and commit again." >&2
            sed -n '1,200p' .aws-sam/build/template.yaml | sed -n '1,200p'
            exit 1
          fi

      - name: SAM Deploy
        working-directory: infra
        run: |
          sam deploy \
            --stack-name "$STACK" \
            --s3-bucket  "$ARTIFACT_BUCKET" \
            --region     "$AWS_REGION" \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              JwtIssuer="$JWT_ISSUER" \
              JwtAudience="$JWT_AUDIENCE" \
              AgentId="$AGENT_ID" \
              AgentAliasId="$AGENT_ALIAS_ID"

      - name: Print ApiUrl output
        id: outputs
        shell: bash
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK" --region "$AWS_REGION" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "API_URL: $API_URL"

      - name: Add ApiUrl to Job Summary
        if: always()
        run: |
          echo "## Deployment Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API_URL:** ${API_URL}" >> $GITHUB_STEP_SUMMARY
